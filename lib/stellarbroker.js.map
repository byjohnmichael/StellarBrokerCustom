{"version":3,"file":"stellarbroker.js","mappings":"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","sources":["webpack://stellarbroker/webpack/universalModuleDefinition","webpack://stellarbroker/external umd \"@stellar/stellar-sdk\"","webpack://stellarbroker/webpack/bootstrap","webpack://stellarbroker/webpack/runtime/define property getters","webpack://stellarbroker/webpack/runtime/hasOwnProperty shorthand","webpack://stellarbroker/./src/errors.js","webpack://stellarbroker/./src/events.js","webpack://stellarbroker/./src/asset.js","webpack://stellarbroker/./src/quote-request.js","webpack://stellarbroker/./src/tx-processor.js","webpack://stellarbroker/./src/client.js","webpack://stellarbroker/./src/cjs.js","webpack://stellarbroker/./src/estimate.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@stellar/stellar-sdk\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@stellar/stellar-sdk\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"stellarbroker\"] = factory(require(\"@stellar/stellar-sdk\"));\n\telse\n\t\troot[\"stellarbroker\"] = factory(root[\"@stellar/stellar-sdk\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__346__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__346__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export class StellarBrokerError extends Error {\r\n    constructor(code, message) {\r\n        super(message)\r\n        this.code = code\r\n    }\r\n\r\n    /**\r\n     * Numeric error code\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    code = 0\r\n}\r\n\r\nconst errors = {\r\n    invalidInitParam(param) {\r\n        return new StellarBrokerError(1, `Invalid parameter value: \"${param}\"`)\r\n    },\r\n    invalidAuthorizationParam() {\r\n        return new StellarBrokerError(2, 'Invalid authorization secret key or callback provided')\r\n    },\r\n    notConnected() {\r\n        return new StellarBrokerError(3, 'Client not connected to the server')\r\n    },\r\n    quoteNotSet() {\r\n        return new StellarBrokerError(11, 'Price quote not available')\r\n    },\r\n    quoteExpired() {\r\n        return new StellarBrokerError(12, 'Price quote expired')\r\n    },\r\n    quoteError(message) {\r\n        return new StellarBrokerError(13, 'Price quotation error: ' + message)\r\n    },\r\n    invalidQuoteParam(invalidParamName = 'asset', details) {\r\n        return new StellarBrokerError(14, `Invalid quote request parameter: \"${invalidParamName}\". ${details}`)\r\n    },\r\n    tradeInProgress() {\r\n        return new StellarBrokerError(20, 'Cannot change quote while trade is in progress')\r\n    },\r\n    invalidSwapTx() {\r\n        return new StellarBrokerError(21, 'Invalid swap transaction received from the server')\r\n    },\r\n    failedToSignTx() {\r\n        return new StellarBrokerError(22, 'Failed to sign received transaction')\r\n    },\r\n    unsupportedEventType(type) {\r\n        return new StellarBrokerError(31, 'Unknown event type: ' + type)\r\n    },\r\n    serverError(message) {\r\n        return new StellarBrokerError(101, message)\r\n    }\r\n}\r\n\r\nexport default errors","/**\r\n * @param {string} type\r\n * @param {{}} data\r\n * @param {string} [key]\r\n * @return {CustomEvent}\r\n */\r\nexport function buildEvent(type, data, key) {\r\n    const evt = new CustomEvent(type, {detail: data})\r\n    evt[key || type] = data\r\n    return evt\r\n}","import {Asset, StrKey} from '@stellar/stellar-sdk'\r\nimport errors from './errors.js'\r\n\r\n/**\r\n * @param {string} asset\r\n * @return {Asset}\r\n */\r\nexport function convertToStellarAsset(asset) {\r\n    if (asset === 'xlm' || asset === 'XLM')\r\n        return Asset.native()\r\n    const [code, issuer] = asset.includes('-') ?\r\n        asset.split('-') :\r\n        asset.split(':')\r\n    return new Asset(code, issuer)\r\n}\r\n\r\nexport function parseAsset(asset, parameter) {\r\n    if (typeof asset === 'string') {\r\n        if (asset === 'XLM' || asset === 'xlm' || asset === 'native')\r\n            return 'XLM'\r\n        if (asset.includes(':')) {\r\n            const [code, issuer] = asset.split(':')\r\n            validateCode(code)\r\n            validateAccount(issuer, parameter)\r\n            return code + '-' + issuer\r\n        }\r\n        if (asset.includes('-')) {\r\n            const [code, issuer] = asset.split('-')\r\n            validateCode(code)\r\n            validateAccount(issuer, parameter)\r\n            return asset\r\n        }\r\n    }\r\n    throw errors.invalidQuoteParam(parameter, 'Invalid asset')\r\n}\r\n\r\nfunction validateCode(code, parameter) {\r\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code))\r\n        throw errors.invalidQuoteParam(parameter, 'Invalid asset code: ' + (!code ? 'missing' : code))\r\n    return code\r\n}\r\n\r\nfunction validateAccount(account, param) {\r\n    if (!account || !StrKey.isValidEd25519PublicKey(account))\r\n        throw errors.invalidQuoteParam(param, 'Invalid account address: ' + (!account ? 'missing' : account))\r\n    return account\r\n}\r\n","import {StrKey} from '@stellar/stellar-sdk'\r\nimport errors from './errors.js'\r\nimport {parseAsset} from './asset.js'\r\n\r\n/**\r\n * @typedef {object} SwapQuoteParams\r\n * @property {string} sellingAsset - Asset to sell\r\n * @property {string} buyingAsset - Asset to buy\r\n * @property {string} [sellingAmount] - Amount of selling asset\r\n * @property {string} [buyingAmount] - Amount of buying asset\r\n * @property {number} [slippageTolerance] - Swap slippage tolerance (0.02 by default - 2%)\r\n * @property {string} [destination] - Trader account address\r\n */\r\n\r\n/**\r\n * @param {SwapQuoteParams} params\r\n * @return {SwapQuoteParams}\r\n */\r\nexport function validateQuoteRequest(params) {\r\n    const {\r\n        destination, sellingAsset, selling_asset, buyingAsset, buying_asset, sellingAmount, selling_amount,\r\n        buyingAmount, buying_amount, slippageTolerance, slippage_tolerance, ...other\r\n    } = params\r\n    const res = {\r\n        sellingAsset: parseAsset(sellingAsset || selling_asset, 'sellingAsset'),\r\n        buyingAsset: parseAsset(buyingAsset || buying_asset, 'buyingAsset'),\r\n        sellingAmount: parseAmount(sellingAmount || selling_amount, 'sellingAmount'),\r\n        buyingAmount: parseAmount(buyingAmount || buying_amount, 'buyingAmount'),\r\n        slippageTolerance: parseSlippageTolerance(slippageTolerance || slippage_tolerance || 0.02, 'slippageTolerance'),\r\n        flow: 'direct'\r\n    }\r\n    if (res.buyingAsset === res.sellingAsset)\r\n        throw errors.invalidQuoteParam('buyingAsset', 'Buying asset can\\'t be the same as selling asset')\r\n    if (res.buyingAmount === undefined && res.sellingAmount === undefined)\r\n        throw errors.invalidQuoteParam('sellingAmount', 'Either \"buyingAmount\" or \"sellingAmount\" parameter is required')\r\n    if (res.buyingAmount !== undefined && res.sellingAmount !== undefined)\r\n        throw errors.invalidQuoteParam('sellingAmount', 'Parameters \"buyingAmount\" and \"sellingAmount\" are mutually exclusive')\r\n    Object.assign(res, other) //add remaining optional params\r\n    Object.freeze(res)\r\n    return res\r\n}\r\n\r\nfunction parseAmount(amount, parameter) {\r\n    if (amount === undefined)\r\n        return undefined\r\n    const parsed = parseFloat(amount)\r\n    if (isNaN(parsed) || parsed <= 0)\r\n        throw errors.invalidQuoteParam(parameter, 'Invalid asset amount: ' + amount)\r\n    return amount\r\n}\r\n\r\nfunction parseSlippageTolerance(src, parameter) {\r\n    const tolerance = parseFloat(src)\r\n    if (isNaN(tolerance))\r\n        throw errors.invalidQuoteParam(parameter, 'Invalid slippage tolerance, number expected')\r\n    if (tolerance < 0)\r\n        throw errors.invalidQuoteParam(parameter, 'Slippage tolerance is too small, expected value >= 0')\r\n    if (tolerance > 0.5)\r\n        throw errors.invalidQuoteParam(parameter, 'Slippage tolerance is too large, expected value < 0.5 (50%)')\r\n    return tolerance\r\n}","import {hash, Keypair, nativeToScVal, StrKey, TransactionBuilder, xdr} from '@stellar/stellar-sdk'\r\nimport errors from './errors.js'\r\n\r\n/**\r\n * @param {StellarBrokerClient} client\r\n * @param {{xdr: string, hash: string, networkFee: string, [confirmed]: boolean}} txRequest\r\n * @return {Promise<string>}\r\n */\r\nexport async function processTxRequest(client, txRequest) {\r\n    //parse incoming transaction\r\n    let tx\r\n    try {\r\n        tx = TransactionBuilder.fromXDR(txRequest.xdr, client.network)\r\n    } catch (e) {\r\n        throw errors.invalidSwapTx()\r\n    }\r\n    //check that transaction is correct\r\n    if (!validateTransaction(client, tx))\r\n        throw errors.invalidSwapTx()\r\n    //if transaction has not been authorized yet by the channel account\r\n    const isSorobanTx = tx.operations[0].auth?.length > 0\r\n    if (isSorobanTx) {\r\n        //send tx back to the server\r\n        if (!tx.signatures.length) {\r\n            //sign auth\r\n            await authorizeInvocation(client, tx)\r\n            tx = await signTx(client, tx)\r\n            return tx.toXDR()//wait for the signed tx from the server to wrap it with fee bump tx\r\n        }\r\n    } else {\r\n        //sign transaction\r\n        tx = await signTx(client, tx)\r\n    }\r\n    //wrap with fee bump\r\n    let wrapped = TransactionBuilder.buildFeeBumpTransaction(client.trader, txRequest.networkFee, tx, client.network)\r\n    //sign fee bump wrapper tx\r\n    wrapped = await signTx(client, wrapped)\r\n    //respond with signed transaction\r\n    return wrapped.toXDR()\r\n}\r\n\r\n/**\r\n * @param {StellarBrokerClient} client\r\n * @param {TransactionI} tx\r\n * @return {Promise<TransactionI>}\r\n * @private\r\n */\r\nasync function authorizeInvocation(client, tx) {\r\n    //from https://github.com/stellar/js-stellar-base/blob/e3d6fc3351e7d242b374c7c6057668366364a279/src/auth.js#L97\r\n    const auth = tx.operations[0].auth[0]\r\n    /** @type {xdr.SorobanAddressCredentials} */\r\n    const addrAuth = auth.credentials().address()\r\n    addrAuth.signatureExpirationLedger(tx.ledgerBounds.maxLedger + 1)\r\n\r\n    const networkId = hash(Buffer.from(tx.networkPassphrase))\r\n    const preimage = xdr.HashIdPreimage.envelopeTypeSorobanAuthorization(\r\n        new xdr.HashIdPreimageSorobanAuthorization({\r\n            networkId,\r\n            nonce: addrAuth.nonce(),\r\n            invocation: auth.rootInvocation(),\r\n            signatureExpirationLedger: addrAuth.signatureExpirationLedger()\r\n        })\r\n    )\r\n    const payload = hash(preimage.toXDR())\r\n    let signature\r\n    if (client.authorization instanceof Keypair) {\r\n        signature = client.authorization.sign(payload)\r\n    } else {\r\n        signature = await promisify(client.authorization(payload))\r\n    }\r\n    const publicKey = StrKey.encodeEd25519PublicKey(addrAuth.address().accountId().value())\r\n    const sigScVal = nativeToScVal(\r\n        {\r\n            public_key: StrKey.decodeEd25519PublicKey(publicKey),\r\n            signature\r\n        },\r\n        {\r\n            type: {\r\n                public_key: ['symbol', null],\r\n                signature: ['symbol', null]\r\n            }\r\n        }\r\n    )\r\n\r\n    addrAuth.signature(xdr.ScVal.scvVec([sigScVal]))\r\n}\r\n\r\n/**\r\n * @param {StellarBrokerClient} client\r\n * @param {TransactionI} tx\r\n * @return {Promise<TransactionI>}\r\n * @private\r\n */\r\nasync function signTx(client, tx) {\r\n    let promise\r\n    if (client.authorization instanceof Keypair) {\r\n        promise = new Promise((resolve, reject) => {\r\n            try {\r\n                tx.sign(client.authorization)\r\n                resolve(tx)\r\n            } catch (e) {\r\n                reject(e)\r\n            }\r\n        })\r\n    } else {\r\n        //normalize external auth result\r\n        promise = promisify(client.authorization(tx))\r\n    }\r\n    return promise\r\n        .then(tx => {\r\n            if (typeof tx === 'string') { //normalize response\r\n                tx = TransactionBuilder.fromXDR(tx, client.network)\r\n            }\r\n            if (!tx || tx.signatures?.length < 1)\r\n                throw new Error(`Transaction was not signed`)\r\n            return tx\r\n        })\r\n        .catch(e => {\r\n            console.error(e)\r\n            throw errors.failedToSignTx()\r\n        })\r\n}\r\n\r\n/**\r\n * @param {StellarBrokerClient} client\r\n * @param {Transaction} tx\r\n * @throws {StellarBrokerError} Invalid swap transaction received\r\n */\r\nfunction validateTransaction(client, tx) {\r\n    /*if (!(tx instanceof FeeBumpTransaction))\r\n        return false\r\n    const {innerTransaction} = tx\r\n    if (tx.feeSource !== this.source)\r\n        return false*/\r\n    for (let swap of tx.operations) {\r\n        if (swap.type === 'invokeHostFunction')\r\n            continue //TODO: add additional validation\r\n        if (swap.type !== 'pathPaymentStrictSend' && swap.type !== 'pathPaymentStrictReceive')\r\n            return false\r\n        const isFee = swap.destination !== client.trader\r\n        if (isFee) {\r\n            if (swap.type !== 'pathPaymentStrictSend')\r\n                return false\r\n            if ((swap.source && swap.source !== client.trader))\r\n                return false\r\n        } else {\r\n            if ((swap.source && swap.source !== swap.destination) || swap.destination !== client.trader)\r\n                return false\r\n        }\r\n    }\r\n    //TODO: check assets and amounts\r\n    return true\r\n}\r\n\r\nfunction promisify(callResult) {\r\n    if (!(callResult instanceof Promise)) {\r\n        if (!callResult)\r\n            return Promise.reject()\r\n        callResult = Promise.resolve(callResult)\r\n    }\r\n    return callResult\r\n}","import {Networks, Keypair, TransactionI, StrKey} from '@stellar/stellar-sdk'\r\nimport errors from './errors.js'\r\nimport {buildEvent} from './events.js'\r\nimport {validateQuoteRequest} from './quote-request.js'\r\nimport {processTxRequest} from './tx-processor.js'\r\n\r\nexport default class StellarBrokerClient {\r\n    /**\r\n     * @param {ClientInitializationParams} params\r\n     */\r\n    constructor(params) {\r\n        this.partnerKey = params.partnerKey\r\n        this.emitter = new EventTarget()\r\n        this.network = Networks[(params.network || 'PUBLIC').toUpperCase()] || params.network\r\n        this.flow = params.flow || 'direct'\r\n        if (!params.account || !StrKey.isValidEd25519PublicKey(params.account))\r\n            throw errors.invalidQuoteParam('account', 'Invalid trader account address: ' + (!params.account ? 'missing' : params.account))\r\n        this.trader = params.account\r\n        if (typeof params.authorization === 'string') {\r\n            try {\r\n                this.authorization = Keypair.fromSecret(params.authorization)\r\n            } catch (e) {\r\n                throw errors.invalidAuthorizationParam()\r\n            }\r\n        } else if (typeof params.authorization === 'function') {\r\n            this.authorization = params.authorization\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    uid\r\n    /**\r\n     * @type {ClientStatus}\r\n     * @readonly\r\n     */\r\n    status = 'disconnected'\r\n    /**\r\n     * @type {WebSocket}\r\n     * @private\r\n     */\r\n    socket\r\n    /**\r\n     * @type {EventTarget}\r\n     * @private\r\n     */\r\n    emitter\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    origin = 'https://api.stellar.broker'\r\n    /**\r\n     * Stellar network passphrase\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    network = ''\r\n    /**\r\n     * Last quote request submitted by the client\r\n     * @type {SwapQuoteParams}\r\n     * @readonly\r\n     */\r\n    quoteRequest\r\n    /**\r\n     * Last quote received from the sever\r\n     * @type {SwapQuoteResult}\r\n     * @readonly\r\n     */\r\n    lastQuote\r\n    /**\r\n     * Current quote accepted for the trading\r\n     * @private\r\n     */\r\n    tradeQuote\r\n    /**\r\n     * API key of the partner\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    partnerKey\r\n    /**\r\n     * Account secret key (for direct swap flow)\r\n     * @type {Keypair|ClientAuthorizationCallback}\r\n     * @private\r\n     */\r\n    authorization\r\n    /**\r\n     * Trader account public key\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    trader\r\n\r\n    /**\r\n     * Connect to the StellarBroker server\r\n     * @return {Promise<StellarBrokerClient>}\r\n     */\r\n    connect() {\r\n        if (this.socket?.readyState === WebSocket.OPEN)\r\n            return Promise.resolve(this) //already opened\r\n        this.socket = new WebSocket(this.origin + '/ws?partner=' + encodeURIComponent(this.partnerKey))\r\n        this.socket.onmessage = this.processMessage.bind(this)\r\n        this.socket.onclose = () => {\r\n            if (this.status !== 'disconnected') {\r\n                this.status = 'disconnected'\r\n                this.notifyError(errors.notConnected())\r\n            }\r\n            console.log('Connection closed')\r\n        }\r\n\r\n        this.socket.onerror = e => console.error(e)\r\n\r\n        return new Promise((confirm, reject) => { //TODO: use 'once'\r\n            const expirationTimeout = setTimeout(() => reject(this), 2000) // 2s timeout\r\n            this.onSocketOpen = () => {\r\n                this.status = 'ready'\r\n                this.heartbeat()\r\n                this.onSocketOpen = undefined\r\n                clearTimeout(expirationTimeout)\r\n                confirm(this)\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Process incoming message\r\n     * @param message\r\n     * @private\r\n     */\r\n    processMessage(message) {\r\n        const raw = JSON.parse(message.data)\r\n        switch (raw.type) {\r\n            case 'connected':\r\n                this.uid = raw.uid\r\n                if (this.onSocketOpen) {\r\n                    this.onSocketOpen()\r\n                }\r\n                if (this.status === 'disconnected') {\r\n                    this.status = 'ready'\r\n                }\r\n                break\r\n            case 'quote':\r\n                this.lastQuote = raw.quote\r\n                this.lastQuote.ts = new Date()\r\n                //send event to the client app\r\n                this.emitter.dispatchEvent(buildEvent('quote', this.lastQuote))\r\n                break\r\n            case 'paused':\r\n                //quotation paused due to inactivity\r\n                this.emitter.dispatchEvent(buildEvent('paused', {}))\r\n                break\r\n            case 'tx':\r\n                if (this.status !== 'trade') {\r\n                    console.log('Received tx in non-trading state', this.status, raw)\r\n                    return //skip unless trading is in progress\r\n                }\r\n                processTxRequest(this, raw)\r\n                    .then(xdr => {\r\n                        this.send({\r\n                            type: 'tx',\r\n                            hash: raw.hash,\r\n                            xdr\r\n                        })\r\n                    })\r\n                    .catch(e => this.notifyError(e))\r\n                break\r\n            case 'stop':\r\n                this.emitter.dispatchEvent(buildEvent('finished', {\r\n                    status: raw.status,\r\n                    sold: raw.sold,\r\n                    bought: raw.bought\r\n                }, 'result'))\r\n                this.status = 'ready'\r\n                this.tradeQuote = undefined\r\n                break\r\n            case 'progress':\r\n                this.emitter.dispatchEvent(buildEvent('progress', {\r\n                    sold: raw.sold,\r\n                    bought: raw.bought\r\n                }, 'status'))\r\n                break\r\n            case 'ping':\r\n                if (raw.uid === this.uid) {\r\n                    this.heartbeat()\r\n                    this.send({type: 'pong', uid: this.uid})\r\n                }\r\n                break\r\n            case 'error':\r\n                this.stop()\r\n                this.notifyError(raw.error)\r\n                break\r\n            default:\r\n                console.log('Unknown message type: ' + raw.type)\r\n                break\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Request swap quote\r\n     * @param {SwapQuoteParams} params - Quote parameters\r\n     */\r\n    quote(params) {\r\n        if (this.status === 'trade')\r\n            throw errors.tradeInProgress()\r\n        this.quoteRequest = validateQuoteRequest(params)\r\n        this.status = 'quote'\r\n        this.connect()\r\n            .then(() => {\r\n                this.status = 'quote'\r\n                this.send({\r\n                    type: 'quote',\r\n                    ...this.quoteRequest\r\n                })\r\n            })\r\n    }\r\n\r\n    confirmQuote() {\r\n        if (this.status === 'disconnected')\r\n            throw errors.notConnected()\r\n        if (this.status === 'trade')\r\n            throw errors.tradeInProgress()\r\n        if (this.status !== 'quote' || !this.lastQuote)\r\n            throw errors.quoteNotSet()\r\n        if ((new Date() - this.lastQuote.ts) > 7000) //do not allow stale quotes quoted more than 7s ago\r\n            throw errors.quoteExpired()\r\n        if (this.lastQuote.status !== 'success')\r\n            throw errors.quoteError(this.lastQuote.error || 'quote not available')\r\n\r\n        this.tradeQuote = this.lastQuote\r\n        this.send({\r\n            type: 'trade',\r\n            account: this.trader\r\n        })\r\n        this.status = 'trade'\r\n    }\r\n\r\n    /**\r\n     * Stop quotation/trading\r\n     */\r\n    stop() {\r\n        if (this.status !== 'trade' && this.status !== 'quote')\r\n            return\r\n        this.send({type: 'stop'})\r\n        this.tradeQuote = undefined\r\n        this.status = 'ready'\r\n    }\r\n\r\n    /**\r\n     * @param {{}} data\r\n     * @private\r\n     */\r\n    send(data) {\r\n        this.socket.send(JSON.stringify(data))\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    heartbeat() {\r\n        clearTimeout(this.pingHandler)\r\n        this.pingHandler = setTimeout(() => {\r\n            console.warn('Lost connection with the server')\r\n            this.socket.close()\r\n        }, 7_000) // 7 seconds heartbeat timeout\r\n    }\r\n\r\n    /**\r\n     * Add event listener\r\n     * @param {StellarBrokerClientEvent} type\r\n     * @param {function} callback\r\n     */\r\n    on(type, callback) {\r\n        validateEventType(type)\r\n        this.emitter.addEventListener(type, callback)\r\n    }\r\n\r\n    /**\r\n     * Add event listener that will be executed once\r\n     * @param {StellarBrokerClientEvent} type\r\n     * @param {function} callback\r\n     */\r\n    once(type, callback) {\r\n        validateEventType(type)\r\n        this.emitter.addEventListener(type, callback, {once: true})\r\n    }\r\n\r\n    /**\r\n     * Remove event listener\r\n     * @param {StellarBrokerClientEvent} type\r\n     * @param {function} callback\r\n     */\r\n    off(type, callback) {\r\n        validateEventType(type)\r\n        this.emitter.removeEventListener(type, callback)\r\n    }\r\n\r\n    /**\r\n     * Close underlying connection and finalize the client\r\n     */\r\n    close() {\r\n        try {\r\n            this.status = 'disconnected'\r\n            this.socket.close()\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Error} e\r\n     * @private\r\n     */\r\n    notifyError(e) {\r\n        console.error(e)\r\n        try {\r\n            this.emitter.dispatchEvent(buildEvent('error', e instanceof Error ? e.message : e))\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n}\r\n\r\nfunction validateEventType(type) {\r\n    if (!StellarBrokerEvents.includes(type))\r\n        throw errors.unsupportedEventType(type)\r\n}\r\n\r\nexport const StellarBrokerEvents = ['quote', 'paused', 'progress', 'finished', 'error']\r\n\r\n/**\r\n * @typedef {object} ClientInitializationParams\r\n * @property {string} [network] - Stellar network identifier or passphrase\r\n * @property {string} [partnerKey] - Partner key\r\n * @property {SwapFlowMode} [flow] - Swap flow mode\r\n * @property {string} account - Trader account address\r\n * @property {string|ClientAuthorizationCallback} authorization - Authorization method, either account secret key or an authorization callback\r\n */\r\n\r\n/**\r\n * @typedef {'disconnected'|'ready'|'quote'|'trade'} ClientStatus\r\n */\r\n\r\n/**\r\n * @typedef {'quote'|'paused'|'progress'|'finished'|'error'} StellarBrokerClientEvent\r\n */\r\n\r\n/**\r\n * @typedef {'direct'} SwapFlowMode\r\n */\r\n\r\n/**\r\n * @typedef {object} SwapQuoteResult\r\n * @property {string} sellingAsset\r\n * @property {string} buyingAsset\r\n * @property {number} slippageTolerance\r\n * @property {string} destination\r\n * @property {number} ledger\r\n * @property {string} [sellingAmount]\r\n * @property {string} [estimatedBuyingAmount]\r\n * @property {string} [buyingAmount]\r\n * @property {string} [estimatedSellingAmount]\r\n * @property {{selling: string, buying: string, path: string[]}} [directTrade]\r\n */\r\n\r\n/**\r\n * @typedef {function(TransactionI|Buffer):Promise<TransactionI|Buffer>} ClientAuthorizationCallback\r\n */","import StellarBrokerClient from './client.js'\r\nimport {estimateSwap} from './estimate.js'\r\n\r\nStellarBrokerClient.estimateSwap = estimateSwap\r\n\r\nexport default StellarBrokerClient","import errors, {StellarBrokerError} from './errors.js'\r\nimport {validateQuoteRequest} from './quote-request.js'\r\n\r\n/**\r\n * Request single swap quote estimate without trading\r\n * @param {SwapQuoteParams} params\r\n * @return {Promise<SwapQuoteResult>}\r\n */\r\nexport async function estimateSwap(params) {\r\n    const query = Object.entries(validateQuoteRequest(params))\r\n        .filter(kv => kv[1] !== undefined)\r\n        .map(([param, value]) => encodeURIComponent(param) + '=' + encodeURIComponent(value))\r\n    const url = (params.origin || 'https://api.stellar.broker') + '/quote?' + query.join('&')\r\n    try {\r\n        const res = await fetch(url).then(r => r.json())\r\n        if (res.status !== 'success')\r\n            throw errors.quoteError(res.error || 'Quote not available')\r\n        return res\r\n    } catch (e) {\r\n        if (e instanceof StellarBrokerError)\r\n            throw e\r\n        throw errors.quoteError('Failed to fetch quote')\r\n        return null\r\n    }\r\n}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__346__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StellarBrokerError","Error","constructor","code","message","super","invalidInitParam","param","invalidAuthorizationParam","notConnected","quoteNotSet","quoteExpired","quoteError","invalidQuoteParam","invalidParamName","details","tradeInProgress","invalidSwapTx","failedToSignTx","unsupportedEventType","type","serverError","buildEvent","data","evt","CustomEvent","detail","parseAsset","asset","parameter","includes","issuer","split","validateCode","validateAccount","errors","test","account","StrKey","isValidEd25519PublicKey","validateQuoteRequest","params","destination","sellingAsset","selling_asset","buyingAsset","buying_asset","sellingAmount","selling_amount","buyingAmount","buying_amount","slippageTolerance","slippage_tolerance","other","res","parseAmount","parseSlippageTolerance","flow","assign","freeze","amount","parsed","parseFloat","isNaN","src","tolerance","async","signTx","client","tx","promise","authorization","Keypair","Promise","resolve","reject","sign","e","promisify","then","TransactionBuilder","fromXDR","network","signatures","length","catch","console","error","callResult","StellarBrokerClient","partnerKey","emitter","EventTarget","Networks","toUpperCase","trader","fromSecret","uid","status","socket","origin","quoteRequest","lastQuote","tradeQuote","connect","readyState","WebSocket","OPEN","encodeURIComponent","onmessage","processMessage","bind","onclose","notifyError","log","onerror","confirm","expirationTimeout","setTimeout","onSocketOpen","heartbeat","clearTimeout","raw","JSON","parse","quote","ts","Date","dispatchEvent","txRequest","xdr","swap","operations","source","validateTransaction","auth","addrAuth","credentials","address","signatureExpirationLedger","ledgerBounds","maxLedger","networkId","hash","Buffer","from","networkPassphrase","preimage","HashIdPreimage","envelopeTypeSorobanAuthorization","HashIdPreimageSorobanAuthorization","nonce","invocation","rootInvocation","payload","toXDR","signature","publicKey","encodeEd25519PublicKey","accountId","value","sigScVal","nativeToScVal","public_key","decodeEd25519PublicKey","ScVal","scvVec","authorizeInvocation","wrapped","buildFeeBumpTransaction","networkFee","processTxRequest","send","sold","bought","stop","confirmQuote","stringify","pingHandler","warn","close","on","callback","validateEventType","addEventListener","once","off","removeEventListener","StellarBrokerEvents","estimateSwap","query","entries","filter","kv","map","url","join","fetch","r","json"],"sourceRoot":""}