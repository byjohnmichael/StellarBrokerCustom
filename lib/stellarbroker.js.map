{"version":3,"file":"stellarbroker.js","mappings":"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","sources":["webpack://stellarbroker/webpack/universalModuleDefinition","webpack://stellarbroker/external umd \"@stellar/stellar-base\"","webpack://stellarbroker/webpack/bootstrap","webpack://stellarbroker/webpack/runtime/define property getters","webpack://stellarbroker/webpack/runtime/hasOwnProperty shorthand","webpack://stellarbroker/./src/errors.js","webpack://stellarbroker/./src/events.js","webpack://stellarbroker/./src/quote-request.js","webpack://stellarbroker/./src/client.js","webpack://stellarbroker/./src/cjs.js","webpack://stellarbroker/./src/estimate.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@stellar/stellar-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@stellar/stellar-base\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"stellarbroker\"] = factory(require(\"@stellar/stellar-base\"));\n\telse\n\t\troot[\"stellarbroker\"] = factory(root[\"@stellar/stellar-base\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__755__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__755__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export class StellarBrokerError extends Error {\r\n    constructor(code, message) {\r\n        super(message)\r\n        this.code = code\r\n    }\r\n\r\n    /**\r\n     * Numeric error code\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    code = 0\r\n}\r\n\r\nconst errors = {\r\n    invalidInitParam(param) {\r\n        return new StellarBrokerError(1, `Invalid parameter value: \"${param}\"`)\r\n    },\r\n    invalidAuthorizationParam() {\r\n        return new StellarBrokerError(2, 'Invalid authorization secret key or callback provided')\r\n    },\r\n    quoteNotSet() {\r\n        return new StellarBrokerError(11, 'Price quote not available')\r\n    },\r\n    quoteExpired() {\r\n        return new StellarBrokerError(12, 'Price quote expired')\r\n    },\r\n    quoteError(message) {\r\n        return new StellarBrokerError(13, 'Price quotation error: ' + message)\r\n    },\r\n    invalidQuoteParam(invalidParamName, details) {\r\n        return new StellarBrokerError(14, `Invalid quote request parameter: \"${invalidParamName}\". ${details}`)\r\n    },\r\n    tradeInProgress() {\r\n        return new StellarBrokerError(20, 'Cannot change quote while trade is in progress')\r\n    },\r\n    invalidSwapTx() {\r\n        return new StellarBrokerError(21, 'Invalid swap transaction received')\r\n    },\r\n    failedToSignTx() {\r\n        return new StellarBrokerError(22, 'Failed to sign received transaction')\r\n    },\r\n    unsupportedEventType(type) {\r\n        return new StellarBrokerError(31, 'Unknown event type: ' + type)\r\n    },\r\n    serverError(message) {\r\n        return new StellarBrokerError(101, 'Server error: ' + message)\r\n    }\r\n}\r\n\r\nexport default errors","/**\r\n * @param {string} type\r\n * @param {{}} data\r\n * @param {string} [key]\r\n * @return {CustomEvent}\r\n */\r\nexport function buildEvent(type, data, key) {\r\n    const evt = new CustomEvent(type, {detail: data})\r\n    evt[key || type] = data\r\n    return evt\r\n}","import {StrKey} from '@stellar/stellar-base'\r\nimport errors from './errors.js'\r\n\r\n/**\r\n * @typedef {object} SwapQuoteParams\r\n * @property {string} sellingAsset - Asset to sell\r\n * @property {string} buyingAsset - Asset to buy\r\n * @property {string} [sellingAmount] - Amount of selling asset\r\n * @property {string} [buyingAmount] - Amount of buying asset\r\n * @property {number} [slippageTolerance] - Swap slippage tolerance (0.02 by default - 2%)\r\n * @property {string} [destination] - Trader account address\r\n */\r\n\r\n/**\r\n * @param {SwapQuoteParams} params\r\n * @return {SwapQuoteParams}\r\n */\r\nexport function validateQuoteRequest(params) {\r\n    const {\r\n        destination, sellingAsset, selling_asset, buyingAsset, buying_asset, sellingAmount, selling_amount,\r\n        buyingAmount, buying_amount, slippageTolerance, slippage_tolerance, ...other\r\n    } = params\r\n    const res = {\r\n        sellingAsset: parseAsset(sellingAsset || selling_asset, 'sellingAsset'),\r\n        buyingAsset: parseAsset(buyingAsset || buying_asset, 'buyingAsset'),\r\n        sellingAmount: parseAmount(sellingAmount || selling_amount, 'sellingAmount'),\r\n        buyingAmount: parseAmount(buyingAmount || buying_amount, 'buyingAmount'),\r\n        slippageTolerance: parseSlippageTolerance(slippageTolerance || slippage_tolerance || 0.02, 'slippageTolerance'),\r\n        flow: 'direct'\r\n    }\r\n    if (res.buyingAsset === res.sellingAsset)\r\n        throw errors.invalidQuoteParam('buyingAsset', 'Buying asset can\\'t be the same as selling asset')\r\n    if (res.buyingAmount === undefined && res.sellingAmount === undefined)\r\n        throw errors.invalidQuoteParam('sellingAmount', 'Either \"buyingAmount\" or \"sellingAmount\" parameter is required')\r\n    if (res.buyingAmount !== undefined && res.sellingAmount !== undefined)\r\n        throw errors.invalidQuoteParam('sellingAmount', 'Parameters \"buyingAmount\" and \"sellingAmount\" are mutually exclusive')\r\n    Object.assign(res, other) //add remaining optional params\r\n    Object.freeze(res)\r\n    return res\r\n}\r\n\r\nfunction parseAsset(asset, parameter) {\r\n    if (typeof asset === 'string') {\r\n        if (asset === 'XLM' || asset === 'xlm' || asset === 'native')\r\n            return 'XLM'\r\n        if (asset.includes(':')) {\r\n            const [code, issuer] = asset.split(':')\r\n            validateCode(code)\r\n            validateAccount(issuer, parameter)\r\n            return code + '-' + issuer\r\n        }\r\n        if (asset.includes('-')) {\r\n            const [code, issuer] = asset.split('-')\r\n            validateCode(code)\r\n            validateAccount(issuer, parameter)\r\n            return asset\r\n        }\r\n    }\r\n    throw errors.invalidQuoteParam(parameter, 'Invalid asset')\r\n}\r\n\r\nfunction validateCode(code, parameter) {\r\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code))\r\n        throw errors.invalidQuoteParam(parameter, 'Invalid asset code: ' + (!code ? 'missing' : code))\r\n    return code\r\n}\r\n\r\nfunction validateAccount(account, param) {\r\n    if (!account || !StrKey.isValidEd25519PublicKey(account))\r\n        throw errors.invalidQuoteParam(param, 'Invalid account address: ' + (!account ? 'missing' : account))\r\n    return account\r\n}\r\n\r\nfunction parseAmount(amount, parameter) {\r\n    if (amount === undefined)\r\n        return undefined\r\n    const parsed = parseFloat(amount)\r\n    if (isNaN(parsed) || parsed <= 0)\r\n        throw errors.invalidQuoteParam(parameter, 'Invalid asset amount: ' + amount)\r\n    return amount\r\n}\r\n\r\nfunction parseSlippageTolerance(src, parameter) {\r\n    const tolerance = parseFloat(src)\r\n    if (isNaN(tolerance))\r\n        throw errors.invalidQuoteParam(parameter, 'Invalid slippage tolerance, number expected')\r\n    if (tolerance < 0)\r\n        throw errors.invalidQuoteParam(parameter, 'Slippage tolerance is too small, expected value >= 0')\r\n    if (tolerance > 0.5)\r\n        throw errors.invalidQuoteParam(parameter, 'Slippage tolerance is too large, expected value < 0.5 (50%)')\r\n    return tolerance\r\n}","import {Networks, TransactionBuilder, Keypair, FeeBumpTransaction, StrKey} from '@stellar/stellar-base'\r\nimport errors from './errors.js'\r\nimport {buildEvent} from './events.js'\r\nimport {validateQuoteRequest} from './quote-request.js'\r\n\r\nexport default class StellarBrokerClient {\r\n    /**\r\n     * @param {ClientInitializationParams} params\r\n     */\r\n    constructor(params) {\r\n        this.partnerKey = params.partnerKey\r\n        this.emitter = new EventTarget()\r\n        this.network = Networks[(params.network || 'PUBLIC').toUpperCase()] || params.network\r\n        this.flow = params.flow || 'direct'\r\n    }\r\n\r\n    /**\r\n     * @type {ClientStatus}\r\n     * @readonly\r\n     */\r\n    status = 'disconnected'\r\n    /**\r\n     * @type {WebSocket}\r\n     * @private\r\n     */\r\n    socket\r\n    /**\r\n     * @type {EventTarget}\r\n     * @private\r\n     */\r\n    emitter\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    origin = 'https://api.stellar.broker'\r\n    /**\r\n     * Stellar network passphrase\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    network = ''\r\n    /**\r\n     * Last quote request submitted by the client\r\n     * @type {SwapQuoteParams}\r\n     * @readonly\r\n     */\r\n    quoteRequest\r\n    /**\r\n     * Last quote received from the sever\r\n     * @type {SwapQuoteResult}\r\n     * @readonly\r\n     */\r\n    lastQuote\r\n    /**\r\n     * Current quote accepted for the trading\r\n     * @private\r\n     */\r\n    tradeQuote\r\n    /**\r\n     * API key of the partner\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    partnerKey\r\n    /**\r\n     * Account secret key (for direct swap flow)\r\n     * @type {Keypair|ClientAuthorizationCallback}\r\n     * @private\r\n     */\r\n    authorization\r\n\r\n    /**\r\n     * Trader account public key\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    source\r\n\r\n    /**\r\n     * Connect to the StellarBroker server\r\n     * @return {Promise<StellarBrokerClient>}\r\n     */\r\n    connect() {\r\n        if (this.socket?.readyState === WebSocket.OPEN)\r\n            return Promise.resolve(this) //already opened\r\n\r\n        this.socket = new WebSocket(this.origin + '/ws?partner=' + encodeURIComponent(this.partnerKey))\r\n        this.socket.onmessage = this.processMessage.bind(this)\r\n        this.socket.onclose = () => {\r\n            console.log('Connection closed')\r\n            this.status = 'disconnected'\r\n        }\r\n\r\n        this.socket.onerror = e => console.error(e)\r\n\r\n        return new Promise((confirm, reject) => { //TODO: use 'once'\r\n            const expirationTimeout = setTimeout(() => reject(this), 2000) // 2s timeout\r\n            this.onSocketOpen = () => {\r\n                this.status = 'ready'\r\n                this.heartbeat()\r\n                this.onSocketOpen = undefined\r\n                clearTimeout(expirationTimeout)\r\n                confirm(this)\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Process incoming message\r\n     * @param message\r\n     * @private\r\n     */\r\n    processMessage(message) {\r\n        const raw = JSON.parse(message.data)\r\n        switch (raw.type) {\r\n            case 'connected':\r\n                if (this.onSocketOpen) {\r\n                    this.onSocketOpen()\r\n                }\r\n                break\r\n            case 'quote':\r\n                this.lastQuote = raw.quote\r\n                this.lastQuote.ts = new Date()\r\n                //send event to the client app\r\n                this.emitter.dispatchEvent(buildEvent('quote', this.lastQuote))\r\n                break\r\n            case 'tx':\r\n                if (this.status !== 'trade') {\r\n                    console.log('Received tx in non-trading state', this.status, raw)\r\n                    return //skip unless trading is in progress\r\n                }\r\n                this.processTxRequest(raw)\r\n                break\r\n            case 'stop':\r\n                this.emitter.dispatchEvent(buildEvent('finished', {\r\n                    status: raw.status,\r\n                    sold: raw.sold,\r\n                    bought: raw.bought\r\n                }, 'result'))\r\n                this.status = 'ready'\r\n                this.tradeQuote = undefined\r\n                this.source = undefined\r\n                break\r\n            case 'progress':\r\n                this.emitter.dispatchEvent(buildEvent('progress', {\r\n                    sold: raw.sold,\r\n                    bought: raw.bought\r\n                }, 'status'))\r\n                break\r\n            case 'ping':\r\n                this.heartbeat()\r\n                this.send({type: 'pong'})\r\n                break\r\n            case 'error':\r\n                this.stop()\r\n                this.emitter.dispatchEvent(buildEvent('error', 'Server error: ' + raw.error))\r\n                break\r\n            default:\r\n                console.log('Unknown message type: ' + raw.type)\r\n                break\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Request swap quote\r\n     * @param {SwapQuoteParams} params - Quote parameters\r\n     */\r\n    quote(params) {\r\n        if (this.status === 'trade')\r\n            throw errors.tradeInProgress()\r\n        this.quoteRequest = validateQuoteRequest(params)\r\n        this.status = 'quote'\r\n        this.connect()\r\n            .then(() => {\r\n                this.send({\r\n                    type: 'quote',\r\n                    ...this.quoteRequest\r\n                })\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Stop quotation/trading\r\n     */\r\n    stop() {\r\n        if (this.status !== 'trade' && this.status !== 'quote')\r\n            return\r\n        this.send({\r\n            type: 'stop'\r\n        })\r\n        this.tradeQuote = undefined\r\n        this.source = undefined\r\n        this.status = 'ready'\r\n    }\r\n\r\n    /**\r\n     * Confirm current quote and start trading\r\n     * @param {string} account - Trader account address\r\n     * @param {string|ClientAuthorizationCallback} authorization - Authorization method, either account secret key or an authorization callback\r\n     */\r\n    confirmQuote(account, authorization) {\r\n        if (this.status !== 'quote')\r\n            throw errors.tradeInProgress()\r\n        if (!this.lastQuote)\r\n            throw errors.quoteNotSet()\r\n        if ((new Date() - this.lastQuote.ts) > 7000) //do not allow stale quotes quoted more than 7s ago\r\n            throw errors.quoteExpired()\r\n        if (this.lastQuote.status !== 'success')\r\n            throw errors.quoteError(this.lastQuote.error || 'quote not available')\r\n        if (!account || !StrKey.isValidEd25519PublicKey(account))\r\n            throw errors.invalidQuoteParam('account', 'Invalid trader account address: ' + (!account ? 'missing' : account))\r\n        if (typeof authorization === 'string') {\r\n            try {\r\n                this.authorization = Keypair.fromSecret(authorization)\r\n            } catch (e) {\r\n                throw errors.invalidAuthorizationParam()\r\n            }\r\n        } else if (typeof authorization === 'function') {\r\n            this.authorization = authorization\r\n        }\r\n        this.tradeQuote = this.lastQuote\r\n        this.source = account\r\n        this.send({\r\n            type: 'trade',\r\n            account\r\n        })\r\n        this.status = 'trade'\r\n    }\r\n\r\n    /**\r\n     * @param {{xdr: string, hash: string}} raw\r\n     * @private\r\n     */\r\n    processTxRequest(raw) {\r\n        //parse incoming transaction\r\n        let tx\r\n        try {\r\n            tx = TransactionBuilder.fromXDR(raw.xdr, this.network)\r\n        } catch (e) {\r\n            throw errors.invalidSwapTx()\r\n        }\r\n        //check that transaction is correct\r\n        if (!this.validateTransaction(tx))\r\n            throw errors.invalidSwapTx()\r\n        //sign transaction\r\n        this.authorizeTx(tx, raw.networkFee)\r\n            .then(tx => {\r\n                if (!tx || tx.signatures.length < 1)\r\n                    return console.error(`Transaction ${raw.hash} not signed`)\r\n                //respond with signed transaction\r\n                this.send({\r\n                    type: 'tx',\r\n                    hash: raw.hash,\r\n                    xdr: tx.toXDR()\r\n                })\r\n            })\r\n            .catch(e => {\r\n                console.error(e)\r\n                throw errors.failedToSignTx()\r\n            })\r\n    }\r\n\r\n    /**\r\n     * @param {Transaction} tx\r\n     * @param {string} networkFee\r\n     * @return {Promise<FeeBumpTransaction>}\r\n     * @private\r\n     */\r\n    async authorizeTx(tx, networkFee) {\r\n        //sign tx\r\n        if (this.authorization instanceof Keypair) {\r\n            tx.sign(this.authorization)\r\n        } else {\r\n            tx = await ensurePromise(this.authorization(tx))\r\n        }\r\n        //wrap with fee bump\r\n        let wrapped = TransactionBuilder.buildFeeBumpTransaction(this.source, networkFee, tx, this.network)\r\n        //sign fee bump wrapper tx\r\n        if (this.authorization instanceof Keypair) {\r\n            wrapped.sign(this.authorization)\r\n        } else {\r\n            wrapped = await ensurePromise(this.authorization(wrapped))\r\n        }\r\n        return wrapped\r\n    }\r\n\r\n    /**\r\n     * @param {Transaction} tx\r\n     * @throws {StellarBrokerError} Invalid swap transaction received\r\n     */\r\n    validateTransaction(tx) {\r\n        /*if (!(tx instanceof FeeBumpTransaction))\r\n            return false\r\n        const {innerTransaction} = tx\r\n        if (tx.feeSource !== this.source)\r\n            return false*/\r\n        for (let swap of tx.operations) {\r\n            if (swap.type !== 'pathPaymentStrictSend' && swap.type !== 'pathPaymentStrictReceive')\r\n                return false\r\n            const isFee = swap.destination !== this.source\r\n            if (isFee) {\r\n                if (swap.type !== 'pathPaymentStrictSend')\r\n                    return false\r\n                if ((swap.source && swap.source !== this.source))\r\n                    return false\r\n            } else {\r\n                if ((swap.source && swap.source !== swap.destination) || swap.destination !== this.source)\r\n                    return false\r\n            }\r\n        }\r\n        //TODO: check assets and amounts\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * @param {{}} data\r\n     * @private\r\n     */\r\n    send(data) {\r\n        this.socket.send(JSON.stringify(data))\r\n    }\r\n\r\n    heartbeat() {\r\n        clearTimeout(this.pingHandler)\r\n        this.pingHandler = setTimeout(() => {\r\n            console.warn('Lost connection with the server')\r\n            this.socket.close()\r\n        }, 11_000) // 11 seconds heartbeat timeout\r\n    }\r\n\r\n    /**\r\n     * Add event listener\r\n     * @param {StellarBrokerClientEvent} type\r\n     * @param {function} callback\r\n     */\r\n    on(type, callback) {\r\n        if (!StellarBrokerEvents.includes(type))\r\n            throw errors.unsupportedEventType(type)\r\n        this.emitter.addEventListener(type, callback)\r\n    }\r\n\r\n    /**\r\n     * Add event listener that will be executed once\r\n     * @param {StellarBrokerClientEvent} type\r\n     * @param {function} callback\r\n     */\r\n    once(type, callback) {\r\n        if (!StellarBrokerEvents.includes(type))\r\n            throw errors.unsupportedEventType(type)\r\n        this.emitter.addEventListener(type, callback, {once: true})\r\n    }\r\n\r\n    /**\r\n     * Remove event listener\r\n     * @param {StellarBrokerClientEvent} type\r\n     * @param {function} callback\r\n     */\r\n    off(type, callback) {\r\n        if (!StellarBrokerEvents.includes(type))\r\n            throw errors.unsupportedEventType(type)\r\n        this.emitter.removeEventListener(type, callback)\r\n    }\r\n\r\n    /**\r\n     * Close underlying connection and finalize the client\r\n     */\r\n    close() {\r\n        try {\r\n            this.socket.close()\r\n        } catch (e) {\r\n        }\r\n    }\r\n}\r\n\r\nexport const StellarBrokerEvents = ['quote', 'finished', 'progress', 'error']\r\n\r\nfunction ensurePromise(callResult) {\r\n    if (!callResult instanceof Promise) {\r\n        if (callResult)\r\n            return Promise.resolve(callResult)\r\n        return Promise.reject()\r\n    }\r\n    return callResult\r\n}\r\n\r\n/**\r\n * @typedef {object} ClientInitializationParams\r\n * @property {string} [network] - Stellar network identifier or passphrase\r\n * @property {string} [partnerKey] - Partner key\r\n * @property {SwapFlowMode} [flow] - Swap flow mode\r\n */\r\n\r\n/**\r\n * @typedef {'disconnected'|'ready'|'quote'|'trade'} ClientStatus\r\n */\r\n\r\n/**\r\n * @typedef {'quote'|'finished'|'progress'|'error'} StellarBrokerClientEvent\r\n */\r\n\r\n/**\r\n * @typedef {'direct'} SwapFlowMode\r\n */\r\n\r\n/**\r\n * @typedef {object} SwapQuoteResult\r\n * @property {string} sellingAsset\r\n * @property {string} buyingAsset\r\n * @property {number} slippageTolerance\r\n * @property {string} destination\r\n * @property {number} ledger\r\n * @property {string} [sellingAmount]\r\n * @property {string} [estimatedBuyingAmount]\r\n * @property {string} [buyingAmount]\r\n * @property {string} [estimatedSellingAmount]\r\n * @property {{selling: string, buying: string, path: string[]}} [directTrade]\r\n */\r\n\r\n/**\r\n * @typedef {function(FeeBumpTransaction):Promise<FeeBumpTransaction>} ClientAuthorizationCallback\r\n */","import StellarBrokerClient from './client.js'\r\nimport {estimateSwap} from './estimate.js'\r\n\r\nStellarBrokerClient.estimateSwap = estimateSwap\r\n\r\nexport default StellarBrokerClient","import errors, {StellarBrokerError} from './errors.js'\r\nimport {validateQuoteRequest} from './quote-request.js'\r\n\r\n/**\r\n * Request single swap quote estimate without trading\r\n * @param {SwapQuoteParams} params\r\n * @return {Promise<SwapQuoteResult>}\r\n */\r\nexport async function estimateSwap(params) {\r\n    const query = Object.entries(validateQuoteRequest(params))\r\n        .filter(kv => kv[1] !== undefined)\r\n        .map(([param, value]) => encodeURIComponent(param) + '=' + encodeURIComponent(value))\r\n    const url = (params.origin || 'https://api.stellar.broker') + '/quote?' + query.join('&')\r\n    try {\r\n        const res = await fetch(url).then(r => r.json())\r\n        if (res.status !== 'success')\r\n            throw errors.quoteError(res.error || 'Quote not available')\r\n        return res\r\n    } catch (e) {\r\n        if (e instanceof StellarBrokerError)\r\n            throw e\r\n        throw errors.quoteError('Failed to fetch quote')\r\n        return null\r\n    }\r\n}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__755__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StellarBrokerError","Error","constructor","code","message","super","invalidInitParam","param","invalidAuthorizationParam","quoteNotSet","quoteExpired","quoteError","invalidQuoteParam","invalidParamName","details","tradeInProgress","invalidSwapTx","failedToSignTx","unsupportedEventType","type","serverError","buildEvent","data","evt","CustomEvent","detail","validateQuoteRequest","params","destination","sellingAsset","selling_asset","buyingAsset","buying_asset","sellingAmount","selling_amount","buyingAmount","buying_amount","slippageTolerance","slippage_tolerance","other","res","parseAsset","parseAmount","parseSlippageTolerance","flow","errors","assign","freeze","asset","parameter","includes","issuer","split","validateCode","validateAccount","test","account","StrKey","isValidEd25519PublicKey","amount","parsed","parseFloat","isNaN","src","tolerance","StellarBrokerClient","partnerKey","emitter","EventTarget","network","Networks","toUpperCase","status","socket","origin","quoteRequest","lastQuote","tradeQuote","authorization","source","connect","readyState","WebSocket","OPEN","Promise","resolve","encodeURIComponent","onmessage","processMessage","bind","onclose","console","log","onerror","e","error","confirm","reject","expirationTimeout","setTimeout","onSocketOpen","heartbeat","clearTimeout","raw","JSON","parse","quote","ts","Date","dispatchEvent","processTxRequest","sold","bought","send","stop","then","confirmQuote","Keypair","fromSecret","tx","TransactionBuilder","fromXDR","xdr","validateTransaction","authorizeTx","networkFee","signatures","length","hash","toXDR","catch","sign","ensurePromise","wrapped","buildFeeBumpTransaction","swap","operations","stringify","pingHandler","warn","close","on","callback","StellarBrokerEvents","addEventListener","once","off","removeEventListener","callResult","estimateSwap","async","query","entries","filter","kv","map","value","url","join","fetch","r","json"],"sourceRoot":""}